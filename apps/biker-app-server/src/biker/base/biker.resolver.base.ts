/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Biker } from "./Biker";
import { BikerCountArgs } from "./BikerCountArgs";
import { BikerFindManyArgs } from "./BikerFindManyArgs";
import { BikerFindUniqueArgs } from "./BikerFindUniqueArgs";
import { CreateBikerArgs } from "./CreateBikerArgs";
import { UpdateBikerArgs } from "./UpdateBikerArgs";
import { DeleteBikerArgs } from "./DeleteBikerArgs";
import { LocationFindManyArgs } from "../../location/base/LocationFindManyArgs";
import { Location } from "../../location/base/Location";
import { InsuranceReminderFindManyArgs } from "../../insuranceReminder/base/InsuranceReminderFindManyArgs";
import { InsuranceReminder } from "../../insuranceReminder/base/InsuranceReminder";
import { VoiceChatRoomFindManyArgs } from "../../voiceChatRoom/base/VoiceChatRoomFindManyArgs";
import { VoiceChatRoom } from "../../voiceChatRoom/base/VoiceChatRoom";
import { BikerService } from "../biker.service";
@graphql.Resolver(() => Biker)
export class BikerResolverBase {
  constructor(protected readonly service: BikerService) {}

  async _bikersMeta(
    @graphql.Args() args: BikerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Biker])
  async bikers(@graphql.Args() args: BikerFindManyArgs): Promise<Biker[]> {
    return this.service.bikers(args);
  }

  @graphql.Query(() => Biker, { nullable: true })
  async biker(
    @graphql.Args() args: BikerFindUniqueArgs
  ): Promise<Biker | null> {
    const result = await this.service.biker(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Biker)
  async createBiker(@graphql.Args() args: CreateBikerArgs): Promise<Biker> {
    return await this.service.createBiker({
      ...args,
      data: {
        ...args.data,

        voiceChatRoom: args.data.voiceChatRoom
          ? {
              connect: args.data.voiceChatRoom,
            }
          : undefined,

        insuranceReminder: args.data.insuranceReminder
          ? {
              connect: args.data.insuranceReminder,
            }
          : undefined,

        location: args.data.location
          ? {
              connect: args.data.location,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Biker)
  async updateBiker(
    @graphql.Args() args: UpdateBikerArgs
  ): Promise<Biker | null> {
    try {
      return await this.service.updateBiker({
        ...args,
        data: {
          ...args.data,

          voiceChatRoom: args.data.voiceChatRoom
            ? {
                connect: args.data.voiceChatRoom,
              }
            : undefined,

          insuranceReminder: args.data.insuranceReminder
            ? {
                connect: args.data.insuranceReminder,
              }
            : undefined,

          location: args.data.location
            ? {
                connect: args.data.location,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Biker)
  async deleteBiker(
    @graphql.Args() args: DeleteBikerArgs
  ): Promise<Biker | null> {
    try {
      return await this.service.deleteBiker(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Location], { name: "locations" })
  async findLocations(
    @graphql.Parent() parent: Biker,
    @graphql.Args() args: LocationFindManyArgs
  ): Promise<Location[]> {
    const results = await this.service.findLocations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InsuranceReminder], {
    name: "insuranceReminders",
  })
  async findInsuranceReminders(
    @graphql.Parent() parent: Biker,
    @graphql.Args() args: InsuranceReminderFindManyArgs
  ): Promise<InsuranceReminder[]> {
    const results = await this.service.findInsuranceReminders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [VoiceChatRoom], { name: "voiceChatRooms" })
  async findVoiceChatRooms(
    @graphql.Parent() parent: Biker,
    @graphql.Args() args: VoiceChatRoomFindManyArgs
  ): Promise<VoiceChatRoom[]> {
    const results = await this.service.findVoiceChatRooms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => VoiceChatRoom, {
    nullable: true,
    name: "voiceChatRoom",
  })
  async getVoiceChatRoom(
    @graphql.Parent() parent: Biker
  ): Promise<VoiceChatRoom | null> {
    const result = await this.service.getVoiceChatRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => InsuranceReminder, {
    nullable: true,
    name: "insuranceReminder",
  })
  async getInsuranceReminder(
    @graphql.Parent() parent: Biker
  ): Promise<InsuranceReminder | null> {
    const result = await this.service.getInsuranceReminder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Location, {
    nullable: true,
    name: "location",
  })
  async getLocation(@graphql.Parent() parent: Biker): Promise<Location | null> {
    const result = await this.service.getLocation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
