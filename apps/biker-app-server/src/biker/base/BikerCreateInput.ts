/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  MaxLength,
  ValidateNested,
} from "class-validator";
import { VoiceChatRoomWhereUniqueInput } from "../../voiceChatRoom/base/VoiceChatRoomWhereUniqueInput";
import { Type } from "class-transformer";
import { LocationCreateNestedManyWithoutBikersInput } from "./LocationCreateNestedManyWithoutBikersInput";
import { InsuranceReminderWhereUniqueInput } from "../../insuranceReminder/base/InsuranceReminderWhereUniqueInput";
import { InsuranceReminderCreateNestedManyWithoutBikersInput } from "./InsuranceReminderCreateNestedManyWithoutBikersInput";
import { VoiceChatRoomCreateNestedManyWithoutBikersInput } from "./VoiceChatRoomCreateNestedManyWithoutBikersInput";
import { LocationWhereUniqueInput } from "../../location/base/LocationWhereUniqueInput";

@InputType()
class BikerCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username?: string | null;

  @ApiProperty({
    required: false,
    type: () => VoiceChatRoomWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => VoiceChatRoomWhereUniqueInput)
  @IsOptional()
  @Field(() => VoiceChatRoomWhereUniqueInput, {
    nullable: true,
  })
  voiceChatRoom?: VoiceChatRoomWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => LocationCreateNestedManyWithoutBikersInput,
  })
  @ValidateNested()
  @Type(() => LocationCreateNestedManyWithoutBikersInput)
  @IsOptional()
  @Field(() => LocationCreateNestedManyWithoutBikersInput, {
    nullable: true,
  })
  locations?: LocationCreateNestedManyWithoutBikersInput;

  @ApiProperty({
    required: false,
    type: () => InsuranceReminderWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => InsuranceReminderWhereUniqueInput)
  @IsOptional()
  @Field(() => InsuranceReminderWhereUniqueInput, {
    nullable: true,
  })
  insuranceReminder?: InsuranceReminderWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => InsuranceReminderCreateNestedManyWithoutBikersInput,
  })
  @ValidateNested()
  @Type(() => InsuranceReminderCreateNestedManyWithoutBikersInput)
  @IsOptional()
  @Field(() => InsuranceReminderCreateNestedManyWithoutBikersInput, {
    nullable: true,
  })
  insuranceReminders?: InsuranceReminderCreateNestedManyWithoutBikersInput;

  @ApiProperty({
    required: false,
    type: () => VoiceChatRoomCreateNestedManyWithoutBikersInput,
  })
  @ValidateNested()
  @Type(() => VoiceChatRoomCreateNestedManyWithoutBikersInput)
  @IsOptional()
  @Field(() => VoiceChatRoomCreateNestedManyWithoutBikersInput, {
    nullable: true,
  })
  voiceChatRooms?: VoiceChatRoomCreateNestedManyWithoutBikersInput;

  @ApiProperty({
    required: false,
    type: () => LocationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => LocationWhereUniqueInput)
  @IsOptional()
  @Field(() => LocationWhereUniqueInput, {
    nullable: true,
  })
  location?: LocationWhereUniqueInput | null;
}

export { BikerCreateInput as BikerCreateInput };
