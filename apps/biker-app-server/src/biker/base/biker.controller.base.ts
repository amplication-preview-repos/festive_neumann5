/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BikerService } from "../biker.service";
import { BikerCreateInput } from "./BikerCreateInput";
import { Biker } from "./Biker";
import { BikerFindManyArgs } from "./BikerFindManyArgs";
import { BikerWhereUniqueInput } from "./BikerWhereUniqueInput";
import { BikerUpdateInput } from "./BikerUpdateInput";
import { LocationFindManyArgs } from "../../location/base/LocationFindManyArgs";
import { Location } from "../../location/base/Location";
import { LocationWhereUniqueInput } from "../../location/base/LocationWhereUniqueInput";
import { InsuranceReminderFindManyArgs } from "../../insuranceReminder/base/InsuranceReminderFindManyArgs";
import { InsuranceReminder } from "../../insuranceReminder/base/InsuranceReminder";
import { InsuranceReminderWhereUniqueInput } from "../../insuranceReminder/base/InsuranceReminderWhereUniqueInput";
import { VoiceChatRoomFindManyArgs } from "../../voiceChatRoom/base/VoiceChatRoomFindManyArgs";
import { VoiceChatRoom } from "../../voiceChatRoom/base/VoiceChatRoom";
import { VoiceChatRoomWhereUniqueInput } from "../../voiceChatRoom/base/VoiceChatRoomWhereUniqueInput";

export class BikerControllerBase {
  constructor(protected readonly service: BikerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Biker })
  async createBiker(@common.Body() data: BikerCreateInput): Promise<Biker> {
    return await this.service.createBiker({
      data: {
        ...data,

        voiceChatRoom: data.voiceChatRoom
          ? {
              connect: data.voiceChatRoom,
            }
          : undefined,

        insuranceReminder: data.insuranceReminder
          ? {
              connect: data.insuranceReminder,
            }
          : undefined,

        location: data.location
          ? {
              connect: data.location,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        username: true,

        voiceChatRoom: {
          select: {
            id: true,
          },
        },

        insuranceReminder: {
          select: {
            id: true,
          },
        },

        location: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Biker] })
  @ApiNestedQuery(BikerFindManyArgs)
  async bikers(@common.Req() request: Request): Promise<Biker[]> {
    const args = plainToClass(BikerFindManyArgs, request.query);
    return this.service.bikers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        username: true,

        voiceChatRoom: {
          select: {
            id: true,
          },
        },

        insuranceReminder: {
          select: {
            id: true,
          },
        },

        location: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Biker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async biker(
    @common.Param() params: BikerWhereUniqueInput
  ): Promise<Biker | null> {
    const result = await this.service.biker({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        username: true,

        voiceChatRoom: {
          select: {
            id: true,
          },
        },

        insuranceReminder: {
          select: {
            id: true,
          },
        },

        location: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Biker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBiker(
    @common.Param() params: BikerWhereUniqueInput,
    @common.Body() data: BikerUpdateInput
  ): Promise<Biker | null> {
    try {
      return await this.service.updateBiker({
        where: params,
        data: {
          ...data,

          voiceChatRoom: data.voiceChatRoom
            ? {
                connect: data.voiceChatRoom,
              }
            : undefined,

          insuranceReminder: data.insuranceReminder
            ? {
                connect: data.insuranceReminder,
              }
            : undefined,

          location: data.location
            ? {
                connect: data.location,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          username: true,

          voiceChatRoom: {
            select: {
              id: true,
            },
          },

          insuranceReminder: {
            select: {
              id: true,
            },
          },

          location: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Biker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBiker(
    @common.Param() params: BikerWhereUniqueInput
  ): Promise<Biker | null> {
    try {
      return await this.service.deleteBiker({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          username: true,

          voiceChatRoom: {
            select: {
              id: true,
            },
          },

          insuranceReminder: {
            select: {
              id: true,
            },
          },

          location: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/locations")
  @ApiNestedQuery(LocationFindManyArgs)
  async findLocations(
    @common.Req() request: Request,
    @common.Param() params: BikerWhereUniqueInput
  ): Promise<Location[]> {
    const query = plainToClass(LocationFindManyArgs, request.query);
    const results = await this.service.findLocations(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        latitude: true,
        longitude: true,

        biker: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/locations")
  async connectLocations(
    @common.Param() params: BikerWhereUniqueInput,
    @common.Body() body: LocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      locations: {
        connect: body,
      },
    };
    await this.service.updateBiker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/locations")
  async updateLocations(
    @common.Param() params: BikerWhereUniqueInput,
    @common.Body() body: LocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      locations: {
        set: body,
      },
    };
    await this.service.updateBiker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/locations")
  async disconnectLocations(
    @common.Param() params: BikerWhereUniqueInput,
    @common.Body() body: LocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      locations: {
        disconnect: body,
      },
    };
    await this.service.updateBiker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/insuranceReminders")
  @ApiNestedQuery(InsuranceReminderFindManyArgs)
  async findInsuranceReminders(
    @common.Req() request: Request,
    @common.Param() params: BikerWhereUniqueInput
  ): Promise<InsuranceReminder[]> {
    const query = plainToClass(InsuranceReminderFindManyArgs, request.query);
    const results = await this.service.findInsuranceReminders(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        reminderDate: true,

        biker: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/insuranceReminders")
  async connectInsuranceReminders(
    @common.Param() params: BikerWhereUniqueInput,
    @common.Body() body: InsuranceReminderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      insuranceReminders: {
        connect: body,
      },
    };
    await this.service.updateBiker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/insuranceReminders")
  async updateInsuranceReminders(
    @common.Param() params: BikerWhereUniqueInput,
    @common.Body() body: InsuranceReminderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      insuranceReminders: {
        set: body,
      },
    };
    await this.service.updateBiker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/insuranceReminders")
  async disconnectInsuranceReminders(
    @common.Param() params: BikerWhereUniqueInput,
    @common.Body() body: InsuranceReminderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      insuranceReminders: {
        disconnect: body,
      },
    };
    await this.service.updateBiker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/voiceChatRooms")
  @ApiNestedQuery(VoiceChatRoomFindManyArgs)
  async findVoiceChatRooms(
    @common.Req() request: Request,
    @common.Param() params: BikerWhereUniqueInput
  ): Promise<VoiceChatRoom[]> {
    const query = plainToClass(VoiceChatRoomFindManyArgs, request.query);
    const results = await this.service.findVoiceChatRooms(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        biker: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/voiceChatRooms")
  async connectVoiceChatRooms(
    @common.Param() params: BikerWhereUniqueInput,
    @common.Body() body: VoiceChatRoomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voiceChatRooms: {
        connect: body,
      },
    };
    await this.service.updateBiker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/voiceChatRooms")
  async updateVoiceChatRooms(
    @common.Param() params: BikerWhereUniqueInput,
    @common.Body() body: VoiceChatRoomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voiceChatRooms: {
        set: body,
      },
    };
    await this.service.updateBiker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/voiceChatRooms")
  async disconnectVoiceChatRooms(
    @common.Param() params: BikerWhereUniqueInput,
    @common.Body() body: VoiceChatRoomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voiceChatRooms: {
        disconnect: body,
      },
    };
    await this.service.updateBiker({
      where: params,
      data,
      select: { id: true },
    });
  }
}
