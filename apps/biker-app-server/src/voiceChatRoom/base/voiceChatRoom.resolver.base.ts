/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VoiceChatRoom } from "./VoiceChatRoom";
import { VoiceChatRoomCountArgs } from "./VoiceChatRoomCountArgs";
import { VoiceChatRoomFindManyArgs } from "./VoiceChatRoomFindManyArgs";
import { VoiceChatRoomFindUniqueArgs } from "./VoiceChatRoomFindUniqueArgs";
import { CreateVoiceChatRoomArgs } from "./CreateVoiceChatRoomArgs";
import { UpdateVoiceChatRoomArgs } from "./UpdateVoiceChatRoomArgs";
import { DeleteVoiceChatRoomArgs } from "./DeleteVoiceChatRoomArgs";
import { BikerFindManyArgs } from "../../biker/base/BikerFindManyArgs";
import { Biker } from "../../biker/base/Biker";
import { VoiceChatRoomService } from "../voiceChatRoom.service";
@graphql.Resolver(() => VoiceChatRoom)
export class VoiceChatRoomResolverBase {
  constructor(protected readonly service: VoiceChatRoomService) {}

  async _voiceChatRoomsMeta(
    @graphql.Args() args: VoiceChatRoomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VoiceChatRoom])
  async voiceChatRooms(
    @graphql.Args() args: VoiceChatRoomFindManyArgs
  ): Promise<VoiceChatRoom[]> {
    return this.service.voiceChatRooms(args);
  }

  @graphql.Query(() => VoiceChatRoom, { nullable: true })
  async voiceChatRoom(
    @graphql.Args() args: VoiceChatRoomFindUniqueArgs
  ): Promise<VoiceChatRoom | null> {
    const result = await this.service.voiceChatRoom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VoiceChatRoom)
  async createVoiceChatRoom(
    @graphql.Args() args: CreateVoiceChatRoomArgs
  ): Promise<VoiceChatRoom> {
    return await this.service.createVoiceChatRoom({
      ...args,
      data: {
        ...args.data,

        biker: args.data.biker
          ? {
              connect: args.data.biker,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => VoiceChatRoom)
  async updateVoiceChatRoom(
    @graphql.Args() args: UpdateVoiceChatRoomArgs
  ): Promise<VoiceChatRoom | null> {
    try {
      return await this.service.updateVoiceChatRoom({
        ...args,
        data: {
          ...args.data,

          biker: args.data.biker
            ? {
                connect: args.data.biker,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VoiceChatRoom)
  async deleteVoiceChatRoom(
    @graphql.Args() args: DeleteVoiceChatRoomArgs
  ): Promise<VoiceChatRoom | null> {
    try {
      return await this.service.deleteVoiceChatRoom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Biker], { name: "bikers" })
  async findBikers(
    @graphql.Parent() parent: VoiceChatRoom,
    @graphql.Args() args: BikerFindManyArgs
  ): Promise<Biker[]> {
    const results = await this.service.findBikers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Biker, {
    nullable: true,
    name: "biker",
  })
  async getBiker(
    @graphql.Parent() parent: VoiceChatRoom
  ): Promise<Biker | null> {
    const result = await this.service.getBiker(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
