/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InsuranceReminder } from "./InsuranceReminder";
import { InsuranceReminderCountArgs } from "./InsuranceReminderCountArgs";
import { InsuranceReminderFindManyArgs } from "./InsuranceReminderFindManyArgs";
import { InsuranceReminderFindUniqueArgs } from "./InsuranceReminderFindUniqueArgs";
import { CreateInsuranceReminderArgs } from "./CreateInsuranceReminderArgs";
import { UpdateInsuranceReminderArgs } from "./UpdateInsuranceReminderArgs";
import { DeleteInsuranceReminderArgs } from "./DeleteInsuranceReminderArgs";
import { BikerFindManyArgs } from "../../biker/base/BikerFindManyArgs";
import { Biker } from "../../biker/base/Biker";
import { InsuranceReminderService } from "../insuranceReminder.service";
@graphql.Resolver(() => InsuranceReminder)
export class InsuranceReminderResolverBase {
  constructor(protected readonly service: InsuranceReminderService) {}

  async _insuranceRemindersMeta(
    @graphql.Args() args: InsuranceReminderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InsuranceReminder])
  async insuranceReminders(
    @graphql.Args() args: InsuranceReminderFindManyArgs
  ): Promise<InsuranceReminder[]> {
    return this.service.insuranceReminders(args);
  }

  @graphql.Query(() => InsuranceReminder, { nullable: true })
  async insuranceReminder(
    @graphql.Args() args: InsuranceReminderFindUniqueArgs
  ): Promise<InsuranceReminder | null> {
    const result = await this.service.insuranceReminder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InsuranceReminder)
  async createInsuranceReminder(
    @graphql.Args() args: CreateInsuranceReminderArgs
  ): Promise<InsuranceReminder> {
    return await this.service.createInsuranceReminder({
      ...args,
      data: {
        ...args.data,

        biker: args.data.biker
          ? {
              connect: args.data.biker,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => InsuranceReminder)
  async updateInsuranceReminder(
    @graphql.Args() args: UpdateInsuranceReminderArgs
  ): Promise<InsuranceReminder | null> {
    try {
      return await this.service.updateInsuranceReminder({
        ...args,
        data: {
          ...args.data,

          biker: args.data.biker
            ? {
                connect: args.data.biker,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InsuranceReminder)
  async deleteInsuranceReminder(
    @graphql.Args() args: DeleteInsuranceReminderArgs
  ): Promise<InsuranceReminder | null> {
    try {
      return await this.service.deleteInsuranceReminder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Biker], { name: "bikers" })
  async findBikers(
    @graphql.Parent() parent: InsuranceReminder,
    @graphql.Args() args: BikerFindManyArgs
  ): Promise<Biker[]> {
    const results = await this.service.findBikers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Biker, {
    nullable: true,
    name: "biker",
  })
  async getBiker(
    @graphql.Parent() parent: InsuranceReminder
  ): Promise<Biker | null> {
    const result = await this.service.getBiker(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
